#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void append(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = newNode;
        newNode->prev = newNode;
    } else {
        Node* last = (*head)->prev;
        last->next = newNode;
        newNode->prev = last;
        newNode->next = *head;
        (*head)->prev = newNode;
    }
}

void printList(Node* head) {
    if (head == NULL) return;
    Node* temp = head;
    do {
        printf("Address: %p, Data: %d\n", (void*)temp, temp->data);
        temp = temp->next;
    } while (temp != head);
}

void swap(Node* node1, Node* node2) {
    int tempData = node1->data;
    node1->data = node2->data;
    node2->data = tempData;
}

void sortList(Node* head) {
    if (head == NULL) return;
    Node* current, *index;
    int swapped;

    do {
        swapped = 0;
        current = head;

        do {
            index = current->next;
            if (current->data > index->data) {
                swap(current, index);
                swapped = 1;
            }
            current = current->next;
        } while (current->next != head);

    } while (swapped);
}

int main() {
    int N;
    Node* head = NULL;

    scanf("%d", &N);

    for (int i = 0; i < N; i++) {
        int data;
        scanf("%d", &data);
        append(&head, data);
    }

    printf("List sebelum pengurutan:\n");
    printList(head);

    sortList(head);

    printf("List setelah pengurutan:\n");
    printList(head);

    return 0;
}
